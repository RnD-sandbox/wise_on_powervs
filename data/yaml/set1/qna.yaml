task_description: |
  This skill provides the ability to classify if a numa allocation is good or bad for the performance of a power virtual server instance or lpar. This is done by analyzing numactl -H command output's node layout and distance matrix.
created_by: IBM # Use your GitHub username; only one creator supported
seed_examples:
  - question: |
      What are the three conditions for the NUMA allocation to ensure good performance of Power virtual server instances?
    answer: |
      To ensure good performance NUMA placement should satisfy 3 conditions.
      1. MIN(CPUs) >= (MAX(CPUs) / 2 )
      2. MIN(Memory Size) >= (MAX(Memory Size) / 2) 
      3. No node should be assigned only memory or only cpus
  - question: |
      Is the following table representation of numactl -H command result show a good NUMA allocation?
      | Node | CPUs | Memory Size (MB) | Memory Free (MB) |
      |------|------|-----------------|-----------------|
      | 0 | 80 | 550555 | 371211 |
      | 1 | 80 | 551318 | 426842 |
      | 2 | 72 | 496589 | 357248 |
      | 3 | 72 | 496589 | 334104 |
      | 4 | 72 | 496588 | 295963 |
      | 5 | 80 | 550870 | 381567 |
      | 6 | 80 | 550854 | 389853 |
      | 7 | 72 | 496103 | 352912 |
    answer: |
      The NUMA allocation looks good and will not cause any performance issues.
      Classification: Good NUMA allocation
      Explanation:
      All conditions the following conditions are met, ensuring balanced NUMA allocation.
      1. MIN(CPUs) >= (MAX(CPUs) / 2 )
      2. MIN(Memory Size) >= (MAX(Memory Size) / 2) 
      3. No node should be assigned only memory or only cpus
    context: |
      To ensure good performance NUMA placement should satisfy 3 conditions.
      1. MIN(CPUs) >= (MAX(CPUs) / 2 )
      2. MIN(Memory Size) >= (MAX(Memory Size) / 2) 
      3. No node should be assigned only memory or only cpus
  - question: |
      Is the following table representation of numactl -H command result show a good NUMA allocation in Power virtual server?
      Markdown table for numactl.hw.ml4.p10.20240312.txt:
      | Node | CPUs | Memory Size (MB) | Memory Free (MB) |
      |------|------|-----------------|-----------------|
      | 0 | 52 | 2048424 | 1944847 |
      | 1 | 48 | 1740044 | 1649811 |
      | 2 | 52 | 2048726 | 1938871 |
      | 3 | 52 | 2048728 | 1950686 |
      | 4 | 52 | 2010620 | 1905547 |
      | 5 | 52 | 2010876 | 1917898 |
      | 6 | 48 | 1856154 | 1755951 |
      | 7 | 48 | 1855174 | 1736886 |
    answer: |
      The NUMA allocation looks good and will not cause any performance issues.
      Classification: Good NUMA allocation
      Explanation:
      All conditions the following conditions are met, ensuring balanced NUMA allocation.
      1. MIN(CPUs) >= (MAX(CPUs) / 2 )
      2. MIN(Memory Size) >= (MAX(Memory Size) / 2) 
      3. No node should be assigned only memory or only cpus
    context: |
      To ensure good performance NUMA placement should satisfy 3 conditions.
      1. MIN(CPUs) >= (MAX(CPUs) / 2 )
      2. MIN(Memory Size) >= (MAX(Memory Size) / 2) 
      3. No node should be assigned only memory or only cpus
  - question: |
      For an E1080 power lpar/vm, is the following table representation of numactl -H command result showing a good NUMA placement?
      Markdown table for numactl.hw.ml4.p10.20240512.txt:
      | Node | CPUs | Memory Size (MB) | Memory Free (MB) |
      |------|------|-----------------|-----------------|
      | 0 | 96 | 1837404 | 1717577 |
      | 1 | 96 | 1838003 | 1766872 |
      | 2 | 96 | 1908077 | 1807720 |
      | 3 | 64 | 594829 | 465216 |
      | 4 | 104 | 2055639 | 1926467 |
      | 5 | 96 | 2070223 | 1947162 |
      | 6 | 96 | 2069711 | 1915990 |
      | 7 | 88 | 1445434 | 1250825 |
      | 8 | 96 | 2069711 | 1932494 |
      | 9 | 96 | 2070223 | 1950960 |
      | 10 | 96 | 2069713 | 1952612 |
      | 11 | 96 | 1900917 | 1800987 |
      | 12 | 96 | 1878155 | 1726584 |
      | 13 | 96 | 1878155 | 1801102 |
      | 14 | 96 | 1878155 | 1759421 |
      | 15 | 96 | 955019 | 806322 |
    answer: |
      This is a case of bad NUMA allocation.
      Classification: Bad NUMA allocation
      Explanation:
      Condition 2 violated. Minimum memory size in any node (594829 MB) is less than half of the maximum memory size in any node (2070223 MB). Violating nodes: [3].
    context: |
      To ensure good performance NUMA placement should satisfy 3 conditions.
      1. MIN(CPUs) >= (MAX(CPUs) / 2 )
      2. MIN(Memory Size) >= (MAX(Memory Size) / 2) 
      3. No node should be assigned only memory or only cpus